#!/usr/bin/env python

from __future__ import print_function

import wsgiref.simple_server
from wsgiref.util import request_uri, is_hop_by_hop
import wsgissl
from BaseHTTPServer import BaseHTTPRequestHandler
import SocketServer
import base64
import ConfigParser
import urlparse
import urllib2
import json
import subprocess
import os
import collections
import sys
import logging
import logging.handlers
import signal
import platform
import optparse
import pwd
import grp


BECOME_ROOT = ['sudo', '-n']
START_STOP_RESTART_COMMANDS = ['start', 'stop', 'restart']
CONFIG = ConfigParser.ConfigParser()

Request = collections.namedtuple('Request', ['environ', 'args', 'path', 'method', 'body'])

HTTP_METHODS_WITH_BODY = ['PATCH', 'POST', 'PUT']

logger = logging.getLogger('Server')

# Patch in status code 422
if 422 not in BaseHTTPRequestHandler.responses:
    BaseHTTPRequestHandler.responses[422] = ('Unprocessable Entity',
                                             'Request understood and syntactically correct, yet unprocessable')


class UpstreamServer(object):
    def __init__(self, config):
        config = dict(config)
        self.daemon_type = config['daemon_type'].lower()
        if self.daemon_type == 'recursor':
            self.package = 'pdns-recursor'
            self.service = 'pdns-recursor'
            self.url = 'http://localhost:8082'
        elif self.daemon_type == 'authoritative':
            self.package = 'pdns-server'
            self.service = 'pdns'
            self.url = 'http://localhost:8081'
        elif self.daemon_type == 'distributor':
            self.package = 'dnsdist'
            self.service = 'dnsdist'
            self.url = 'http://localhost:8083'
        else:
            raise ValueError('Unknown daemon_type %r' % self.daemon_type)

        self.authentication = config.get('authentication')
        self.package = config.get('package', self.package)
        self.service = config.get('service', self.service)
        self.url = config.get('url', self.url)
        self.url = self.url.rstrip('/')  # strip last /


def check_output(*popenargs, **kwargs):
    r"""Run command with arguments and return its output as a byte string.

    Backported from Python 2.7 as it's implemented as pure python on stdlib.
    from https://gist.github.com/1027906

    >>> check_output(['/usr/bin/python', '--version'])
    Python 2.6.2
    """
    process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
    output = process.communicate()[0]
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        error = subprocess.CalledProcessError(retcode, cmd)
        error.output = output
        raise error
    return output


class ExposedException(Exception):

    def __init__(self, message, status=500, headers=None, content=None):
        if message is None:
            message = BaseHTTPRequestHandler.responses[status][1]
        Exception.__init__(self, message)
        self.status = status
        self.headers = headers
        self.content = content
        if headers is None:
            self.headers = []


class NotFoundException(ExposedException):

    def __init__(self):
        ExposedException.__init__(self, None, status=404)


class AuthenticationRequiredException(ExposedException):

    def __init__(self, www_auth):
        ExposedException.__init__(self, None, status=401)


class Response(object):

    def __init__(self, content, content_type='text/plain', headers=None, status=200):
        self.content = content
        self.content_type = content_type
        self.headers = headers
        if self.headers is None:
            self.headers = []
        self.status = status

    def start(self, start_response):
        status = self.status
        if not isinstance(status, str):
            if status in BaseHTTPRequestHandler.responses:
                status = str(status) + ' ' + BaseHTTPRequestHandler.responses[status][0]
            else:
                status = str(status) + ' Unknown error'
        default_headers = [
            ('Content-Type', self.content_type),
            ('Access-Control-Allow-Origin', CONFIG.get('proxy', 'allow_origin')),
            ('Server', 'Manager/0')
        ]
        headers = default_headers + [hdr for hdr in self.headers if hdr[0] not in [h[0] for h in default_headers]]
        start_response(status, headers)
        return [self.content]


class JSONResponse(Response):

    def __init__(self, data, callback=None, headers=None):
        content = json.dumps(data)
        content_type = 'application/json'
        if callback is not None:
            content_type = 'application/javascript'
            content = callback + '(' + content + ');'
        Response.__init__(self, content, content_type=content_type, headers=headers)


class ExceptionResponse(Response):

    def __init__(self, ex):
        content = str(ex)
        if getattr(ex, 'content'):
            content = ex.content
        Response.__init__(self, content, status=ex.status, headers=ex.headers)


def run_proc(cmdline):
    status = {'success': True, 'cmdline': cmdline}
    try:
        status['output'] = check_output(cmdline, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as ex:
        status['success'] = False
        status['returncode'] = ex.returncode
        status['output'] = ex.output
    return status


def do_start_stop_restart(action):
    if not action in START_STOP_RESTART_COMMANDS:
        raise StandardError("Invalid action given")
    cmdline = BECOME_ROOT + ['service', UPSTREAM.service, action]
    return run_proc(cmdline)


def do_install_upgrade(version):
    PACKAGE_MANAGER.refresh()
    if version and len(version) == 0:
        version = None
    return PACKAGE_MANAGER.install_upgrade(UPSTREAM.package, version)


def handle_route_manage(action, args):
    if action in START_STOP_RESTART_COMMANDS:
        return do_start_stop_restart(action)
    if action in ['install', 'upgrade']:
        version = args.get('version', [''])[0]
        return do_install_upgrade(version)

    raise ExposedException('unknown action')


def handle_route_servers(request):
    url = UPSTREAM.url + request.path
    if 'QUERY_STRING' in request.environ:
        url = url + '?' + request.environ['QUERY_STRING']
    data = request.body if request.method in HTTP_METHODS_WITH_BODY else None

    headers = {}
    if 'HTTP_ACCEPT' in request.environ:
        headers['Accept'] = request.environ['HTTP_ACCEPT']
    if 'CONTENT_TYPE' in request.environ:
        headers['Content-Type'] = request.environ['CONTENT_TYPE']

    # Build our own urllib2 opener, which doesn't handle HTTP errors (we want to forward them as-is).
    opener = urllib2.OpenerDirector()
    for handler in [urllib2.UnknownHandler, urllib2.HTTPHandler]:
        opener.add_handler(handler())

    headers['X-API-Key'] = request.environ.get('HTTP_X_API_KEY', '')

    try:
        forwarded_req = urllib2.Request(url, data=data, headers=headers)
        forwarded_req.get_method = lambda: request.method
        conn = opener.open(forwarded_req, timeout=5)
        result = conn.read()
        conn.close()
    except urllib2.HTTPError as ex:
        raise ExposedException(ex.reason, status=ex.code, content=ex.read())
    except urllib2.URLError as ex:
        logging.exception("Upstream request failed: %s", ex)
        raise ExposedException(ex.reason, status=500, content=ex.message)

    headers = [(k.strip(), v.strip()) for (k, v) in [h.split(': ', 1) for h in conn.info().headers]
               if not is_hop_by_hop(k)]
    content_type = [v for (k, v) in headers if k.lower() == 'content-type'][0]
    response = Response(result, status=conn.code, content_type=content_type, headers=headers)

    return response


def authenticate(reqenv):
    expected_apikey = CONFIG.get('auth', 'apikey')
    received_apikey = reqenv.get('HTTP_X_API_KEY', None)
    return received_apikey == expected_apikey


def route(request):
    if not authenticate(request.environ):
        raise AuthenticationRequiredException('Basic realm="manager"')

    callback = request.args.get('_callback', [None])[0]

    if request.path.startswith('/manage/') and request.method == 'POST':
        # /manage/<action> (no trailing /)
        path = request.path.split('/')
        if len(path) != 3:
            raise NotFoundException()
        action = path[2]
        return JSONResponse(handle_route_manage(action, request.args), callback=callback)

    elif request.path.startswith('/servers') or request.path.startswith('/api') or request.path.startswith('/jsonstat'):
        return handle_route_servers(request)

    else:
        raise NotFoundException()


def manager_app(environ, start_response):
    path = request_uri(environ)
    parsed_path = urlparse.urlparse(path)
    method = environ['REQUEST_METHOD']
    request_body = ''
    if method in HTTP_METHODS_WITH_BODY:
        request_body_size = int(environ['CONTENT_LENGTH'])
        request_body = str(environ['wsgi.input'].read(request_body_size))
        args = urlparse.parse_qs(request_body)
    else:
        args = urlparse.parse_qs(parsed_path.query)

    try:
        path = '/'.join([component for component in parsed_path.path.split('/') if component != ''])
        if '..' in path:
            raise NotFoundException()

        path = '/' + path
        request = Request(environ=environ, path=path, args=args, method=method, body=request_body)

        response = route(request)

    except ExposedException as ex:
        response = ExceptionResponse(ex)

    return response.start(start_response)


def format_address(client_address):
    return '%s:%s' % client_address


class PdnsmgrdRequestHandler(wsgissl.SecureWSGIRequestHandler):

    def address_string(self):
        """Override address_string to not resolve the client address."""
        return format_address(self.client_address)

    def log_request(self, code='-', size='-'):
        self.log_message_level(logging.INFO, 'REQUEST: "%s" %s %s',
                               self.requestline, str(code), str(size))

    def log_error(self, fmt, *args):
        """Log an error.

        This is called when a request cannot be fulfilled.  By
        default it passes the message on to log_message().

        Arguments are the same as for log_message().
        """
        self.log_message_level(logging.ERROR, fmt, args)

    def log_message(self, fmt, *args):
        """Log an arbitrary message.

        This is used by all other logging functions.  Override
        it if you have specific logging wishes.

        The first argument, FORMAT, is a format string for the
        message to be logged.  If the format string contains
        any % escapes requiring parameters, they should be
        specified as subsequent arguments (it's just like
        printf!).

        The client ip address and current date/time are prefixed to every
        message.

        """
        self.log_message_level(logging.WARNING, fmt, args)

    def log_message_level(self, level, fmt, *args):
        logger.log(level, "%s %s", self.address_string(), fmt % args)


class PdnsmgrdServer(wsgissl.SecureWSGIServer):

    def server_bind(self):
        """Override server_bind to not resolve the hostname.
        Basically undo the override in BaseHTTPServer.
        """
        SocketServer.TCPServer.server_bind(self)
        host, port = self.socket.getsockname()[:2]
        self.server_name = host
        self.server_port = port
        self.setup_environ()

    def handle_error(self, request, client_address):
        """Handle an error gracefully.

        We log the traceback and continue.
        """
        logger.exception('Exception happened during processing of request from %s', format_address(client_address))


class PackageManager(object):
    def __init__(self, refresh_command, install_upgrade_command, install_upgrade_version_command):
        self.refresh_command = refresh_command
        self.install_upgrade_command = install_upgrade_command
        self.install_upgrade_version_command = install_upgrade_version_command

    def refresh(self):
        cmdline = BECOME_ROOT + self.refresh_command
        check_output(cmdline)

    def install_upgrade(self, package, version=None):
        if not version:
            tpl = BECOME_ROOT + self.install_upgrade_command
        else:
            tpl = BECOME_ROOT + self.install_upgrade_version_command
        cmdline = []
        format_args = {'package': package, 'version': version}
        for part in tpl:
            cmdline.append(part.format(**format_args))
        return run_proc(cmdline)


class PackageManagerAPT(PackageManager):
    def __init__(self):
        PackageManager.__init__(
            self,
            ['apt-get', '-q', 'update'],
            ['DEBIAN_FRONTEND=noninteractive', 'apt-get', '-q', 'install', '-y', '{package}'],
            ['DEBIAN_FRONTEND=noninteractive', 'apt-get', '-q', 'install', '-y', '{package}=={version}']
        )


class PackageManagerYUM(PackageManager):
    def __init__(self):
        PackageManager.__init__(
            self,
            ['yum', 'makecache'],
            ['yum', 'install', '-d', '0', '-e', '0', '-y', '{package}'],
            ['yum', 'install', '-d', '0', '-e', '0', '-y', '--allow-downgrade', '{package}=={version}']
        )


def make_server(address, port, certfile, keyfile):
    if not address:
        address = '0.0.0.0'

    httpd = wsgiref.simple_server.make_server(
        address, port, manager_app,
        server_class=PdnsmgrdServer,
        handler_class=PdnsmgrdRequestHandler)
    httpd.allow_reuse_address = True
    httpd.set_credentials(keyfile, certfile)

    logger.warning("Serving https://%s:%d/", address, port)
    return httpd


def setup_logging():
    fmt = '%(name)s: %(message)s'
    target = CONFIG.get('logging', 'target')
    if target == 'file':
        handler = logging.FileHandler(CONFIG.get('logging', 'file'))
        fmt = '%(asctime)-15s ' + fmt
    elif target == 'syslog':
        handler = logging.handlers.SysLogHandler(CONFIG.get('logging', 'syslog'))
        fmt = ('pdnsmgrd[%d]: ' % os.getpid()) + fmt
    elif target == 'console':
        handler = logging.StreamHandler(sys.stderr)
    else:
        raise StandardError('Please set up logging.target in configuration.')
    formatter = logging.Formatter(fmt, None)
    handler.setFormatter(formatter)
    logging.root.addHandler(handler)
    level = logging.INFO if CONFIG.getboolean('logging', 'log_requests') else logging.WARNING
    logging.root.setLevel(level)


def signal_hup(signum, frame):
    """close log files, for logrotate and similar uses"""
    logger.warning('SIGHUP received, closing logfiles')
    for handler in logging.root.handlers:
        if hasattr(handler, 'close') and callable(handler.close):
            handler.close()


def drop_privs_if_root(user, group):
    if not (os.getuid() == 0):
        return

    try:
        gid = grp.getgrnam(group).gr_gid
        uid = pwd.getpwnam(user).pw_uid
    except KeyError as ex:
        logger.error("Dropping privileges to user \"%s\", group \"%s\" failed: %s", user, group, ex)
        exit(1)

    os.chdir('/')
    if getattr(os, 'initgroups', None) is not None:
        os.initgroups(user, gid)
    else:
        logger.warn("Not initializing supplemental groups: Python too old")
    os.setgid(gid)
    os.setuid(uid)


argparser = optparse.OptionParser(description="PowerDNS daemon manager daemon")
argparser.add_option('--config-dir', default='/etc/powerdns', help="Location of configuration directory")
argparser.add_option('--config-name', default='',
                     help="Name of this virtual configuration, appended to config file name")


def main():
    global UPSTREAM
    global PACKAGE_MANAGER

    (args, argvalues) = argparser.parse_args()

    CONFIG.add_section('upstream')
    CONFIG.set('upstream', 'authentication', 'forward')
    CONFIG.add_section('os')
    CONFIG.set('os', 'user', 'pdnsmgrd')
    CONFIG.set('os', 'group', 'pdnsmgrd')
    CONFIG.add_section('proxy')
    CONFIG.set('proxy', 'port', '8084')
    CONFIG.set('proxy', 'address', '127.0.0.1')
    CONFIG.add_section('logging')
    CONFIG.set('logging', 'target', 'syslog')
    CONFIG.set('logging', 'syslog', '/var/run/syslog' if platform.system() == 'Darwin' else '/dev/log')
    CONFIG.set('logging', 'log_requests', 'false')
    config_filename = args.config_name if args.config_name else 'pdnsmgrd'
    config_filename = os.path.join(args.config_dir, config_filename + '.conf')
    if not os.path.exists(config_filename):
        print("E: Configuration file \"%s\" not found, aborting." % config_filename)
        sys.exit(1)
    CONFIG.read(config_filename)

    setup_logging()
    logger.info("Using configuration from %s", config_filename)

    UPSTREAM = UpstreamServer(CONFIG.items('upstream'))
    PACKAGE_MANAGER = PackageManagerAPT()

    signal.signal(signal.SIGHUP, signal_hup)

    server = make_server(
        CONFIG.get('proxy', 'address'),
        CONFIG.getint('proxy', 'port'),
        os.path.join(args.config_dir, CONFIG.get('proxy', 'certfile')),
        os.path.join(args.config_dir, CONFIG.get('proxy', 'keyfile'))
    )
    drop_privs_if_root(CONFIG.get('os', 'user'), CONFIG.get('os', 'group'))
    server.serve_forever()


if __name__ == '__main__':
    main()
